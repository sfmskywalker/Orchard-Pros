@using System.Globalization
@model Orchard.Layouts.ViewModels.LayoutEditorViewModel
@{
    Style.Require("jQueryUI_Orchard");
    Style.Include("font-awesome/css/font-awesome.css", "font-awesome/css/font-awesome.min.css");
    Style.Include("custom-grid.css");
    Style.Include("designer.css");
    Script.Require("jQueryUI_Draggable");
    Script.Require("jQueryUI_Droppable");
    Script.Require("jQueryUI_Sortable");
    Script.Require("jQueryUI_Resizable");
    Script.Include("jquery.deserialize.js");
    Script.Include("dialog.js");
    Script.Include("designer.toolbar.js");
    Script.Include("designer.canvas.js");
    Script.Include("designer.grid.js");
    Script.Include("frame.js");
    Script.Include("serializer.js");
}
@Display.TokenHint()
<fieldset>
    <div class="layout-editor"
         data-anti-forgery-token="@Html.AntiForgeryTokenValueOrchard()"
         data-render-url="@Url.Action("Render", "Element", new { layoutId = Model.Part.Id, contentType = Model.Part.ContentItem.ContentType, area = "Orchard.Layouts" })"
         data-display-type="Design"
         data-element-browser-url="@Url.Action("Browse", "Element", new { layoutId = Model.Part.Id, contentType = Model.Part.ContentItem.ContentType, area = "Orchard.Layouts" })"
         data-edit-url="@Url.Action("Edit", "Element", new { layoutId = Model.Part.Id, contentType = Model.Part.ContentItem.ContentType, area = "Orchard.Layouts" })"
         data-apply-template-url="@Url.Action("ApplyTemplate", "Layout", new { layoutId = Model.Part.Id, contentType = Model.Part.ContentItem.ContentType, area = "Orchard.Layouts" })"
         data-confirm-delete-prompt="@T("Are you sure you want to delete this element?")"
         data-editor-dialog-title-format="@T("$1 Properties")"
         data-editor-dialog-name="Layout">
        <div class="group canvas-toolbar">
            <div class="pull-right">
                <ol class="group">
                    @if (Model.Templates.Any()) {
                        var options = Model.Templates.Select(x => new SelectListItem { Text = Html.ItemDisplayText(x).ToString(), Value = x.Id.ToString(CultureInfo.InvariantCulture), Selected = x.Id == Model.SelectedTemplateId });
                        <li>
                            <div class="template-picker">
                                <label>
                                    @T("Use template:")
                                    @Html.DropDownList("template-picker", options, T("(None)").Text)
                                </label>
                            </div>
                        </li>
                    }
                    @*<li>
                        <div class="edit-layout-state">
                            <a class="icon icon-pencil" title="@T("View layout JSON")" href="#"></a>
                        </div>
                    </li>*@
                </ol>
            </div>
        </div>
        <div class="canvas">
            <div class="x-container x-root">
                <div class="x-holder drop-target">
                    @Display(Model.LayoutRoot)
                </div>
                <a href="#" class="add root @if(Model.LayoutRoot.Items.Count == 0){<text>start</text>}" title="@T("Add Element")"></a>
            </div>
        </div>
        <div class="trash"></div>
    </div>
</fieldset>