@using Orchard.Utility.Extensions
@using OrchardPros.Models
@{
    var connectedProviders = (IDictionary<string, UserPayoutProvider>) Model.ConnectedProviders;
    var providerShapes = (IList<dynamic>) Model.AvailableProviders;
    var availableProviders = providerShapes.Where(provider => connectedProviders.Values.All(x => x.ProviderName != provider.Provider.Name)).ToArray();

    Script.Require("ShapesBase");
}
@if (connectedProviders.Any()) {
    <p>@T("You are connected with the following Payout Providers:")</p>
    <ul>
        @foreach (var connectedProvider in connectedProviders) {
            var provider = providerShapes.Single(x => x.Provider.Name == connectedProvider.Value.ProviderName);
            <li>@provider.Provider.Name</li>
        }
    </ul>
}
else {
  <p>@T("In order to receive payments, please connect with one of the below payment providers.")</p>
}

@if (availableProviders.Any()) {
    <p>@T("The following Payout providers are available to link your Orchard Pros account.")</p>
    <ul class="social-oauth">
        @foreach (var providerShape in availableProviders) {
	        var name = (string) providerShape.Provider.Name;
            <li class="@name.HtmlClassify()">
                @Display(providerShape)
            </li>
        }
    </ul>
}