@{
    int page = Model.Page;
    int pageSize = Model.PageSize;
    double totalItemCount = Model.TotalItemCount;
    string pagerId = Model.PagerId;
    var currentPage = page;
    if (currentPage < 1) {
        currentPage = 1;
    }

    if (pageSize < 1) {
        pageSize = WorkContext.CurrentSite.PageSize;
    }

    const int numberOfPagesToShow = 7;
    var totalPageCount = (int)Math.Ceiling(totalItemCount / pageSize);
    var routeData = new RouteValueDictionary(Html.ViewContext.RouteData.Values);
    var queryString = Request.QueryString;
    if (queryString != null) {
        foreach (var key in from string key in queryString.Keys where key != null && !routeData.ContainsKey(key) let value = queryString[key] select key) {
            routeData[key] = queryString[key];
        }
    }

    int firstPage = Math.Max(1, page - (numberOfPagesToShow / 2));
    int lastPage = Math.Min(totalPageCount, page + numberOfPagesToShow / 2);
    var pageKey = String.IsNullOrEmpty(pagerId) ? "page" : pagerId;
}
<ul class="pagination pagination-sm">
    <li @if (page <= 1) { <text> class="disabled" </text>     }>
        @{if (currentPage > 1) { // also to keep from having "page=1" in the query string
            routeData[pageKey] = currentPage - 1;
        }}
        @if (page <= 1) {
            <span>&laquo;</span>
        }
        else {
            <a href="@Url.Action((string)routeData["action"], (string)routeData["controller"], routeData)">&laquo;</a>
        }
    </li>
    @if (firstPage > 1 && numberOfPagesToShow > 0) {
        <li><span>@T("...")</span></li>
    }
    @for (var p = firstPage; p <= lastPage; p++) {
        if (p == currentPage) {
            <li class="active"><span>@p</span></li>
        }
        else {
            if (p == 1) {
                routeData.Remove(pageKey);
            }
            else {
                routeData[pageKey] = p;
            }
            <li><a href="@Url.Action((string)routeData["action"], (string)routeData["controller"], routeData)">@p</a></li>
        }
    }
    @if (lastPage < totalPageCount && numberOfPagesToShow > 0) {
        <li><span>@T("...")</span></li>
    }
    <li @if (page >= totalPageCount) { <text> class="disabled" </text>      }>
        @{routeData[pageKey] = page + 1;}
        <a href="@Url.Action((string)routeData["action"], (string)routeData["controller"], routeData)">&raquo;</a>
    </li>
</ul>